# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Full Pipline

on:
  push:
    branches:
      - main

jobs:
  full-pipline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:

      - uses: actions/checkout@v3
#scan
#     - name: Scan source code
#       uses: anchore/scan-action@v3
#       with:
#         path: "${{ github.workspace }}"
#         fail-build: false
#build
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
#test
      - name: Run Maven Tests
        run: mvn test --file pom.xml
#jfrog
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: bengold.jfrog.io/project-green-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
#sbom
      - name: Create SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: "${{ github.event.repository.name }}-sbom.spdx.json"
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        with:
          sbom: "${{ github.event.repository.name }}-sbom.spdx.json"
          fail-build: false

      - name: Debug
        run: |
          ls -lRa
#jf
#      - name: JF Integration
#        uses: jfrog/setup-jfrog-cli@v3
#        env:
#          # JFrog platform url (for example: https://acme.jfrog.io) 
#          JF_URL: https://bengold.jfrog.io
#          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
#      - name: Publish to Artifactory
#        run: |
#          jfrog rt u "target/*.jar" "project-green-libs-snapshot" --build-name=project-green --build-number=${{ github.run_number }}
#          jfrog rt u "Dockerimage" "project-green-libs-snapshot" --build-name=project-green --build-number=${{ github.run_number }}
