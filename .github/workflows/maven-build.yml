# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Full Pipline

on:
  push:
    branches:
      - main

jobs:
  full-pipline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:

      - uses: actions/checkout@v3
#scan
#     - name: Scan source code
#       uses: anchore/scan-action@v3
#       with:
#         path: "${{ github.workspace }}"
#         fail-build: false
#build
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven Wrapper
        run: ./mvnw -B package
#test
      - name: Run Maven Tests
        run: mvn test --file pom.xml
#docker
      - name: Build Docker Image
        run: docker build -t bengold7/project-green:latest .
#security
      - name: Scan Docker Image
        uses: anchore/scan-action@v3
        with:
          image: "bengold7/project-green:latest"
          fail-build: false
          output-format: json
          vex: true
      - name: Create SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: "${{ github.event.repository.name }}-sbom.spdx.json"
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        with:
          sbom: "${{ github.event.repository.name }}-sbom.spdx.json"
          fail-build: false
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          # Artifact name
          name: Artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ./results.json
#source-code            ./results.sarif
#debug
      - name: Debug
        run: |
          ls -lR
#jf
      - name: JF Integration
        uses: jfrog/setup-jfrog-cli@v3
        env:
          # JFrog platform url (for example: https://acme.jfrog.io) 
          JF_URL: https://bengold.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - run: |
          jf rt ping
